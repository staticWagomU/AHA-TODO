---
import { getTodos, writeTodos, type Todo } from "../../todoFileOperations";

export const partial = true;

const handlePutRequest = (todos: Todo[], id: string) => {
  const newTodos = todos.map((todo: Todo) => {
    if (todo.id === Number(id)) {
      return { ...todo, complete: !todo.complete };
    }
    return todo;
  });
  writeTodos(newTodos);
  Astro.response.status = 300;
};

const handleDeleteRequest = (todos: Todo[], id: string) => {
  const newTodos = todos.filter((todo: Todo) => todo.id !== Number(id));
  writeTodos(newTodos);
  Astro.response.status = 200;
};

const handlePatchRequest = async (todos: Todo[], id: string) => {
  const json = await Astro.request.json();
  const title = json.title;
  if (typeof title !== "string") throw new Error("title is not string");
  const newTodos = todos.map((todo: Todo) => {
    if (todo.id === Number(id)) {
      return { ...todo, title: title };
    }
    return todo;
  });
  writeTodos(newTodos);
  Astro.response.status = 200;
};

try {
  const todos = getTodos();
  const requestMethod = Astro.request.method;
  const { id } = Astro.params;
  if (!id) throw new Error("id is not defined");

  switch (requestMethod) {
    case "PUT":
      handlePutRequest(todos, id);
      break;
    case "DELETE":
      handleDeleteRequest(todos, id);
      break;
    case "PATCH":
      await handlePatchRequest(todos, id);
      break;
    default:
      Astro.response.status = 405;
      throw new Error("Method not allowed");
  }
} catch (error) {
  console.error(error);
}
---
